<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on Un blog qui parle de développement web, de design et d&#39;autres trucs de geek</title>
    <link>/tags/code/</link>
    <description>Recent content in Code on Un blog qui parle de développement web, de design et d&#39;autres trucs de geek</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ch-fr</language>
    <lastBuildDate>Sun, 23 Jan 2022 10:36:19 +0100</lastBuildDate><atom:link href="/tags/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Github Copilot, le compagnon de code qui mâche le travail</title>
      <link>/posts/copilot/</link>
      <pubDate>Sun, 23 Jan 2022 10:36:19 +0100</pubDate>
      
      <guid>/posts/copilot/</guid>
      <description>Introduction Annoncé le 29 juin 2021, Github Copilot est un outil à IA permettant de faire de l&amp;rsquo;auto-completion sur la base de milliards de ligne de code trouvés sur Github. Un outil sensé faire gagner beaucoup de temps et même empêcher les plus flemmards à se casser la tête sur des fonctions compliquées. Installé sur ma machine, je vais directement montrer ici les étendues du programme.
Premier essai: convertisseur de distance Pour ce premier jet, je vais essayer de faire comprendre à Copilot que je veux une fonction qui convertit une distance en pied en mètres.</description>
      <content>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Annoncé le 29 juin 2021, Github Copilot est un outil à IA permettant de faire de l&amp;rsquo;auto-completion sur la base de milliards de ligne de code trouvés sur Github. Un outil sensé faire gagner beaucoup de temps et même empêcher les plus flemmards à se casser la tête sur des fonctions compliquées. Installé sur ma machine, je vais directement montrer ici les étendues du programme.&lt;/p&gt;
&lt;h1 id=&#34;premier-essai-convertisseur-de-distance&#34;&gt;Premier essai: convertisseur de distance&lt;/h1&gt;
&lt;p&gt;Pour ce premier jet, je vais essayer de faire comprendre à Copilot que je veux une fonction qui convertit une distance en pied en mètres. J&amp;rsquo;écris donc en commentaire le plus précisément possible le but de la fonction et la nomme correctement, le tout en anglais pour faciliter le travail.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Convert a distance given in foot to a distance in meter.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param {Number} distanceInFoot
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @return {Number} distanceInMeter
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;convertFootInMeter&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;distanceInFoot&lt;/span&gt;) {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;distanceInFoot&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.3048&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;- code généré par Copilot
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Le calcul est correct: 1 pied fait bien 0.3048 mètres. Si on veut aller dans le détail, Copilot aurait pu aller plus loin. Par exemple, la fonction pourrait faire un contrôle de la valeur donnée en argument, vérifier qu&amp;rsquo;elle ne soit par exemple pas &lt;code&gt;null&lt;/code&gt; ou &lt;code&gt;undefined&lt;/code&gt;. Il aurait pu également proposer un arrondissement de la valeur. Prudence donc de ne pas utiliser la sortie comme fonction toute faite mais plutôt comme un premier jet pour son élaboration.&lt;/p&gt;
&lt;h1 id=&#34;deuxième-essai-récupérer-une-image-sur-unsplash&#34;&gt;Deuxième essai: récupérer une image sur Unsplash&lt;/h1&gt;
&lt;p&gt;Pour ce deuxième essai, je vais demander à Copilot de me générer une fonction qui récupère aléatoirement une image sur le site &lt;a href=&#34;https://unsplash.com/&#34;&gt;Unsplash&lt;/a&gt;. Je vous invite d&amp;rsquo;ailleurs à aller lire l&amp;rsquo;article sur &lt;a href=&#34;../reshot&#34;&gt;Reshot&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Fetch a ranom image from https://unsplash.com
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @return {String} The url of the image
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchImageFromUnsplash&lt;/span&gt;() {
	&lt;span style=&#34;color:#75715e&#34;&gt;// Code généré par Copilot:
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetch&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://source.unsplash.com/random&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;then&lt;/span&gt;(
		&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;
	);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Par chance, l&amp;rsquo;API de Unsplash propose une ressource pour récupérer une image aléatoire. Copilot l&amp;rsquo;a bien compris et l&amp;rsquo;a intégré. Il manque cependant une gestion d&amp;rsquo;erreur au cas où la requête n&amp;rsquo;aboutirait pas. À nouveau, pratique mais à contrôler avant de lancer en production.&lt;/p&gt;
&lt;h1 id=&#34;troisième-essai-générateur-de-blague&#34;&gt;Troisième essai: générateur de blague&lt;/h1&gt;
&lt;p&gt;Juste pour le plaisir, essayons de demander à Copilot de générer une fonction qui sort une blague aléatoirement. Cette fois-ci, je ne préciserai expressément pas de source afin de voir comment il réagit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Generate a random joke
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @return {String} The generated joke
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generateRandomJoke&lt;/span&gt;() {
	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;This is a random joke&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;lt;- code généré par Copilot
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Un résultat qui montre les limites de l&amp;rsquo;outil. Mais je dois admettre qu&amp;rsquo;il m&amp;rsquo;a bien eu :)&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;L&amp;rsquo;outil est très impressionant et permet d&amp;rsquo;anticiper des lignes de code fastidieuse. À utiliser avec rigueur et attention: le code généré par Copilot est sur la base de milliards de lignes de code récupérées via des repo public sur Github, ce qui n&amp;rsquo;est pas synonyme de qualité.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Déposer des points aléatoirement au sein d&#39;un cercle</title>
      <link>/posts/point/</link>
      <pubDate>Wed, 12 Jan 2022 19:53:44 +0100</pubDate>
      
      <guid>/posts/point/</guid>
      <description>Introduction Cet article n&amp;rsquo;a pas pour but de fournir directement la solution à ce problème via un code optimale dans un langage spécifique. Il sert plutôt à suivre un chemin de réflexion pour aboutir à un résultat satisfaisant et éviter les solutions rapides et bancales.
Première méthode: Plan cartésien La méthode rapide et primaire consiste à dessiner un carré plutôt qu&amp;rsquo;un cercle. On place sur un plan cartésien les points en corrdonnée X et Y.</description>
      <content>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Cet article n&amp;rsquo;a pas pour but de fournir directement la solution à ce problème via un code optimale dans un langage spécifique. Il sert plutôt à suivre un chemin de réflexion pour aboutir à un résultat satisfaisant et éviter les solutions rapides et bancales.&lt;/p&gt;
&lt;h1 id=&#34;première-méthode-plan-cartésien&#34;&gt;Première méthode: Plan cartésien&lt;/h1&gt;
&lt;p&gt;La méthode rapide et primaire consiste à dessiner un carré plutôt qu&amp;rsquo;un cercle. On place sur un plan cartésien les points en corrdonnée X et Y. Une fois fait, on dessine un rond dans ce plan et on rejette tous les points qui sont hors de ce rond (&lt;a href=&#34;https://en.wikipedia.org/wiki/Rejection_sampling&#34;&gt;Rejection Sampling&lt;/a&gt;). En bref, chaque point dont la coordonnée dépasse le cercle compris dans le carré est rejeté. Puis on recommence le processus.&lt;/p&gt;
&lt;p&gt;La problématique est donc qu&amp;rsquo;on répète l&amp;rsquo;opération plusieurs fois. Certains points sont ignorés, d&amp;rsquo;autres sont acceptés; ce qui rend en apparence la méthode redondante.&lt;/p&gt;
&lt;h1 id=&#34;seconde-méthode-plan-polaire&#34;&gt;Seconde méthode: Plan polaire&lt;/h1&gt;
&lt;p&gt;Au lieu d&amp;rsquo;utiliser un plan cartésien, on peut utiliser un plan polaire. On utilise dans ce cas non pas des axes X et Y mais une distance et un angle. Le problème est qu’en répétant l’expérience, les points sont concentrés au centre. En effet, plus on se déplace sur l’extérieur du cercle, plus on écarte les points. Pour rendre le tout plus homogène, il faut utiliser une fonction de distribution plus uniforme; un peu technique pour la mentionner ici.&lt;/p&gt;
&lt;h1 id=&#34;troisième-méthode-découpage-en-triangle&#34;&gt;Troisième méthode: Découpage en triangle&lt;/h1&gt;
&lt;p&gt;Une troisième méthode est de découper le cercle en plusieurs triangles. On sélectionne aléatoirement l&amp;rsquo;un de ces triangle et on y dépose le point en suivant une formule de distribution uniforme, à nouveau non expliquée ici pour des raisons techniques.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Les deux dernières méthodes semblent plus élégantes en apparence, car elles forment directement un cercle sans passer par une étape intermédiaire de construction d&amp;rsquo;un carré. Cependant, il semble que la méthode la plus rapide semble la première méthode. Une solution simple, en apparence sous-optimale, s&amp;rsquo;avère finalement également être la plus rapide.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=4y_nmpv-9lI&#34;&gt;The BEST Way to Find a Random Point in a Circle&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/channel/UC1tozVUXyve6pkAv6gtcrQQ&#34;&gt;nubDotDev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
